# 工作流的名称，会显示在 GitHub 仓库的 Actions 页面上
name: 自动部署

# 定义触发工作流的事件
on:
  push:
    branches:
      - main # 当代码被推送到 main 分支时触发

# 定义工作流所需的权限
permissions:
  contents: read    # 允许读取仓库内容
  pages: write     # 允许写入 GitHub Pages
  id-token: write  # 允许写入身份令牌，用于部署

# 定义工作流中的作业
jobs:
  # 构建作业
  build:
    # 指定运行环境为最新版本的 Ubuntu
    runs-on: ubuntu-latest

    # 定义作业的步骤
    steps:
      # 步骤1：检出代码
      - name: Checkout
        uses: actions/checkout@v4  # 使用官方的 checkout action，用于获取仓库代码

      # 步骤2：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 使用官方的 setup-node action
        with:
          node-version: '18'  # 指定 Node.js 版本为 18
          cache: 'npm'       # 启用 npm 依赖缓存，加快构建速度

      # 步骤3：安装项目依赖
      - name: Install dependencies
        run: npm ci  # 使用 ci 命令进行依赖安装，这比 npm install 更适合 CI 环境

      # 步骤4：构建项目
      - name: Build
        run: npm run build  # 运行构建命令，生成静态文件

      # 步骤5：配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4  # 配置 GitHub Pages 的部署环境

      # 步骤6：上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3  # 上传构建后的文件
        with:
          path: './dist'  # 指定要上传的文件目录，这里是构建输出目录

      # 步骤7：部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment  # 为部署步骤指定一个 ID
        uses: actions/deploy-pages@v4  # 使用官方的部署 action 发布到 GitHub Pages